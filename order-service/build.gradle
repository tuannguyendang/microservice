buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.palantir.gradle.docker:gradle-docker:0.25.0"
    }
}

plugins {
    id 'org.springframework.boot' version '2.3.2.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
}

apply plugin: 'com.palantir.docker'
apply from: 'integration-test.gradle'

group = 'com.dangtuan'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}
repositories {
    mavenCentral()
    mavenLocal()
}
ext {
    set('springCloudVersion', "Hoxton.SR6")
}

dependencies {
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'
    annotationProcessor 'org.projectlombok:lombok'
    compile 'io.springfox:springfox-boot-starter:3.0.0'
    compile 'org.apache.commons:commons-lang3:3.9'
    compile 'commons-io:commons-io:2.7'
    compile 'javax.inject:javax.inject:1'
    compileOnly 'org.projectlombok:lombok'
    implementation 'com.auth0:java-jwt:3.8.2'
    implementation 'com.dangtuan:common-dto:0.0.1-SNAPSHOT'
    implementation 'com.dangtuan:common-kafka:0.0.1-SNAPSHOT'
    implementation 'io.micrometer:micrometer-registry-prometheus:1.6.2'
    implementation 'io.prometheus:simpleclient_pushgateway:0.9.0'
    implementation 'io.sentry:sentry-spring-boot-starter:3.2.0'
    implementation 'org.mapstruct:mapstruct:1.3.1.Final'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.cloud:spring-cloud-starter-oauth2'
    implementation 'org.springframework.cloud:spring-cloud-starter-zipkin'
    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation "org.liquibase:liquibase-core:3.10.0"
    runtimeOnly 'mysql:mysql-connector-java'
    testImplementation 'org.apache.httpcomponents:httpclient:4.5.13'
    testImplementation 'org.mockito:mockito-core:3.6.0'
    testImplementation 'org.mock-server:mockserver-netty:5.11.2'
    testImplementation ('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.powermock:powermock-module-testng:2.0.9'
    testImplementation 'org.powermock:powermock-api-mockito2:2.0.9'
    testImplementation 'org.testng:testng:7.4.0'
    testImplementation 'org.mock-server:mockserver-netty:5.11.2'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}
test {
    useTestNG()
}

task unpack(type: Copy) {
    dependsOn bootJar
    from 'build/libs'
    into("build/dependency")
}

docker {
    name "${project.group}/${bootJar.baseName}"
    copySpec.from(tasks.unpack.outputs).into("dependency")
    buildArgs(['DEPENDENCY': "dependency"])
}